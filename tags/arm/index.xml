<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM on Incredible Technology, Incredibly Simple</title><link>https://damianflynn.github.io/tags/arm/</link><description>Recent content in ARM on Incredible Technology, Incredibly Simple</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 07 Aug 2024 14:58:00 +0000</lastBuildDate><atom:link href="https://damianflynn.github.io/tags/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>Using AI to Empower Cloud Architecture and Deployments</title><link>https://damianflynn.github.io/posts/using-ai-to-empower-cloud-architecture-and-deployments/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/using-ai-to-empower-cloud-architecture-and-deployments/</guid><description>The integration of artificial intelligence (AI) into cloud infrastructure is revolutionizing how we manage and deploy cloud resources. AI, now a pivotal component, optimizes the entire lifecycle of cloud architecture, enhancing tasks like deployment, maintenance, and scaling. This article explores the role of AI in empowering cloud architecture and deployments, especially when combined with Infrastructure as Code (IaC) tools like Bicep and Terraform.</description></item><item><title>Bicep - Tags as Parameters</title><link>https://damianflynn.github.io/posts/bicep-tags-as-parameters/</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/bicep-tags-as-parameters/</guid><description>&lt;p>&lt;strong>Deploying infrastructure ARM Templates to Azure, but using Tags and their respective value as the parameter configuration settings&lt;/strong>&lt;/p>
&lt;p>In a post earlier, we look at using arm to lookup the value of tags&amp;rsquo; at both the Subscription and Resource Level.&lt;/p>
&lt;p>With Bicep this is much easier to understand. This is the same lab configuration as in the original post, but this time to code should be a lot more readable.&lt;/p></description></item><item><title>Azure IaC - Tags as Parameters</title><link>https://damianflynn.github.io/posts/azure-iac-tags-as-parameters/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/azure-iac-tags-as-parameters/</guid><description>&lt;p>Deploying infrastructure ARM Templates to Azure, but using Tags and thier respective value as the parameter configuration settings&lt;/p>
&lt;p>In the post, I am going to introduce a concept which will allow you to greatly up your Infrastructure as Code game, by using Azure as a State Machine!&lt;/p>
&lt;p>One of the typical challenges when deploying ARM templates, is the sheer number of parameters which we find as a requirement to complete a deployment; which as you will appreciate gets considerably harder as we target many environments.&lt;/p></description></item><item><title>Azure IaC - Function Keys</title><link>https://damianflynn.github.io/posts/azure-iac-function-keys/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/azure-iac-function-keys/</guid><description>&lt;p>&lt;strong>Retrieve the Function Host Keys while deploying an ARM template&lt;/strong>&lt;/p>
&lt;p>Todays conundrum: As I deploy a new Function Application, I need a simple methodology to retrieve the Host Keys for the function application so that I validate the deployment has been successful; and potentially pass on the key to related services, for example API Management.&lt;/p>
&lt;p>As before, I am leveraging templates, and will stay cloud native; this time depending on the functions Output ability to present the keys.&lt;/p></description></item><item><title>Azure IaC - Appending Tags</title><link>https://damianflynn.github.io/posts/azure-iac-appending-tags/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/azure-iac-appending-tags/</guid><description>&lt;p>&lt;strong>Dynamically appending Tags to our ARM template with the union function&lt;/strong>&lt;/p>
&lt;p>Todays conundrum: As I am leveraging templates, there will always be some standard tags I require to implement within the template, but I also require to provide additional tags as a parameter to be appended with the deployment.&lt;/p>
&lt;p>My objective is to set up tags within an ARM template in accordance with good governance and the Cloud adoption framework.&lt;/p></description></item><item><title>Guacamole Azure Appliance</title><link>https://damianflynn.github.io/posts/guacamole-azure-appliance/</link><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/guacamole-azure-appliance/</guid><description>&lt;p>Apache Guacamole is a free and open source web application which lets you access your dashboard from anywhere using a modern web browser. It is a clientless remote desktop gateway which only requires Guacamole installed on a server and a web browser supporting HTML5.&lt;/p>
&lt;p>Guacamole is the best way to keep multiple instances accessible over the internet. Once you add an instance to Guacamole, you donâ€™t need to remember the password as it can securely store the credentials. It also lets you share the desktops among other users in a group. Guacamole supports multiple connection methods such as SSH, Telnet, VNC, and RDP.&lt;/p></description></item><item><title>Defining Policy as Code with ARM Templates</title><link>https://damianflynn.github.io/posts/defining-policy-as-code-with-arm-templates/</link><pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/posts/defining-policy-as-code-with-arm-templates/</guid><description>&lt;p>My colleagues and friends &lt;a href="https://blog.tyang.org/2018/06/06/using-arm-templates-to-deploying-azure-policy-definitions-that-requires-input-parameters/">Tao Yang&lt;/a> , and &lt;a href="https://cloudadministrator.net/2018/07/17/defining-input-parameters-for-policy-definitions-in-arm-template/">Stanislav Zhelyazkov&lt;/a> have both recently posts interesting topics on how to implement your Azure Policy as Code which I strongly recommend you take a few moments to review&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.tyang.org/2018/06/06/using-arm-templates-to-deploying-azure-policy-definitions-that-requires-input-parameters/">Using ARM Templates to deploy azure policy definitions that require input parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloudadministrator.net/2018/07/17/defining-input-parameters-for-policy-definitions-in-arm-template/">Defining input parameters for policy definitions in ARM Templates&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="improving-readability">Improving Readability&lt;/h1>
&lt;p>Both of these topics address the core of the challenges we face when approaching policy as an Infrastructure as Code problem. However, one of the things that is lost in the translation is the readability of the templates which they are deploying.&lt;/p></description></item></channel></rss>