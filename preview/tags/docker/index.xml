<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Incredible Technology, Incredibly Simple</title><link>https://damianflynn.github.io/preview/tags/docker/</link><description>Recent content in Docker on Incredible Technology, Incredibly Simple</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 13 May 2025 22:45:00 +0000</lastBuildDate><atom:link href="https://damianflynn.github.io/preview/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>IoT - NodeRED on Arc-Enabled Edge</title><link>https://damianflynn.github.io/preview/posts/iot-nodered-on-arc-enabled-edge/</link><pubDate>Mon, 28 Apr 2025 13:16:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-nodered-on-arc-enabled-edge/</guid><description>Learn how to deploy a fully integrated Node-RED environment inside a K3s Kubernetes cluster on an Azure Arc-connected edge device. This guide walks you through namespace setup, persistent storage, service exposure, and secure access over SSH tunnels. Simulate MQTT and Modbus devices, visualize flows, and forward real-time telemetry to Azure MQ and OPC UA—all without opening firewall ports. Ideal for industrial IoT scenarios needing secure hybrid connectivity and local processing.</description></item><item><title>IoT - Azure IoT Operations</title><link>https://damianflynn.github.io/preview/posts/iot-azure-iot-operations/</link><pubDate>Fri, 25 Apr 2025 23:07:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-azure-iot-operations/</guid><description>&lt;p>An Azure Arc-enabled Kubernetes cluster is a prerequisite for deploying Azure IoT Operations. This article describes how to prepare a cluster before you deploy Azure IoT Operations. This article includes guidance for Ubuntu&lt;/p>
&lt;blockquote>
&lt;p>[!warning] ⚠️
Microsoft supports Azure Kubernetes Service (AKS) Edge Essentials for deployments on Windows and K3s for deployments on Ubuntu. If you want to deploy Azure IoT Operations to a multi-node solution, use K3s on Ubuntu.
Starting from an Ubuntu server, which has be Arc Enabled, we can use this as a base for the Azure IoT Operations.&lt;/p></description></item><item><title>IoT - Azure Arc Connected K3s</title><link>https://damianflynn.github.io/preview/posts/iot-azure-arc-connected-k3s/</link><pubDate>Thu, 24 Apr 2025 12:24:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-azure-arc-connected-k3s/</guid><description>Transform your on-premises infrastructure into a cloud-integrated powerhouse by combining K3s Kubernetes with Azure Arc on an Ubuntu server. This guide walks you through every step—from deploying K3s and configuring user access to connecting your cluster to Azure Arc, enabling observability with Grafana, and integrating full-scale monitoring with Azure Monitor. Whether you&amp;rsquo;re building edge deployments or hybrid IoT solutions, this tutorial gives you a production-grade environment with the flexibility of the cloud and control of local resources.</description></item><item><title>Installing Docker and Compose on Raspbian Buster</title><link>https://damianflynn.github.io/preview/posts/installing-docker-and-compose-on-raspbian-buster/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/installing-docker-and-compose-on-raspbian-buster/</guid><description>&lt;p>Quickly update a new Raspberry Pi, which has an install of Raspbian Buster with Docker and Docker-compose.&lt;/p>
&lt;h1 id="docker">Docker&lt;/h1>
&lt;p>This is simple, as the Docker team have done all the work&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -fsSL get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And, we can add our user to the Docker group so we do not need the &lt;code>sudo&lt;/code> every time. I am using the environment variable &lt;code>$USER&lt;/code>; which indicates who is logged in currently. In my case this is the user &lt;em>pi&lt;/em>.&lt;/p></description></item></channel></rss>