<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Incredible Technology, Incredibly Simple</title><link>https://damianflynn.github.io/preview/</link><description>Recent content on Incredible Technology, Incredibly Simple</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 13 May 2025 22:45:00 +0000</lastBuildDate><atom:link href="https://damianflynn.github.io/preview/index.xml" rel="self" type="application/rss+xml"/><item><title>IoT - Azure IoT MQTT Broker</title><link>https://damianflynn.github.io/preview/posts/iot-azure-iot-mqtt-broker/</link><pubDate>Tue, 13 May 2025 07:16:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-azure-iot-mqtt-broker/</guid><description>&lt;p>The MQTT broker of Azure IoT Operations is a central part of the edge solution:&lt;/p>
&lt;p>&lt;img src="img-1f2eb56e-image-31.png" alt="Image">&lt;/p>
&lt;p>In the Azure IoT Operations resource in the Azure portal, we can check the MQTT broker settings and even update and control the broker!&lt;/p>
&lt;p>&lt;em>Note&lt;/em>: for testing purposes, the Kubectl CLI tool can be used on the edge to check the Kubernetes settings and see what is managed from the cloud.&lt;/p>
&lt;p>Notice that we cannot manage everything from the Azure portal like deploying certificates in the local Kubernetes secrets store. You need access to the Edge device via SSH but this can be done via Azure Arc.&lt;/p></description></item><item><title>IoT - NodeRED on Arc-Enabled Edge</title><link>https://damianflynn.github.io/preview/posts/iot-nodered-on-arc-enabled-edge/</link><pubDate>Mon, 28 Apr 2025 13:16:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-nodered-on-arc-enabled-edge/</guid><description>Learn how to deploy a fully integrated Node-RED environment inside a K3s Kubernetes cluster on an Azure Arc-connected edge device. This guide walks you through namespace setup, persistent storage, service exposure, and secure access over SSH tunnels. Simulate MQTT and Modbus devices, visualize flows, and forward real-time telemetry to Azure MQ and OPC UA—all without opening firewall ports. Ideal for industrial IoT scenarios needing secure hybrid connectivity and local processing.</description></item><item><title>IoT - Azure IoT Operations</title><link>https://damianflynn.github.io/preview/posts/iot-azure-iot-operations/</link><pubDate>Fri, 25 Apr 2025 23:07:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-azure-iot-operations/</guid><description>&lt;p>An Azure Arc-enabled Kubernetes cluster is a prerequisite for deploying Azure IoT Operations. This article describes how to prepare a cluster before you deploy Azure IoT Operations. This article includes guidance for Ubuntu&lt;/p>
&lt;blockquote>
&lt;p>[!warning] ⚠️
Microsoft supports Azure Kubernetes Service (AKS) Edge Essentials for deployments on Windows and K3s for deployments on Ubuntu. If you want to deploy Azure IoT Operations to a multi-node solution, use K3s on Ubuntu.
Starting from an Ubuntu server, which has be Arc Enabled, we can use this as a base for the Azure IoT Operations.&lt;/p></description></item><item><title>IoT - Azure Arc Connected K3s</title><link>https://damianflynn.github.io/preview/posts/iot-azure-arc-connected-k3s/</link><pubDate>Thu, 24 Apr 2025 12:24:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/iot-azure-arc-connected-k3s/</guid><description>Transform your on-premises infrastructure into a cloud-integrated powerhouse by combining K3s Kubernetes with Azure Arc on an Ubuntu server. This guide walks you through every step—from deploying K3s and configuring user access to connecting your cluster to Azure Arc, enabling observability with Grafana, and integrating full-scale monitoring with Azure Monitor. Whether you&amp;rsquo;re building edge deployments or hybrid IoT solutions, this tutorial gives you a production-grade environment with the flexibility of the cloud and control of local resources.</description></item><item><title>Azure Arc enabling an Ubuntu Server</title><link>https://damianflynn.github.io/preview/posts/azure-arc-enabling-an-ubuntu-server/</link><pubDate>Wed, 23 Apr 2025 07:53:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/azure-arc-enabling-an-ubuntu-server/</guid><description>Discover how to transform a basic Ubuntu server into a fully Azure Arc-enabled edge device. This step-by-step guide walks you through onboarding a Linux server into Azure Arc, installing the hybrid agent, establishing secure remote access over web sockets, and enabling centralized management through the Azure Portal. Whether for IoT, hybrid cloud, or secure remote administration, this post equips you with the tools to bridge your edge environments seamlessly with Azure.</description></item><item><title>Optimizing my GL-MT3000 for UPnP Streaming with Audio Transcoding</title><link>https://damianflynn.github.io/preview/posts/optimizing-my-gl-mt3000-for-upnp-streaming-with-audio-transcoding/</link><pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/optimizing-my-gl-mt3000-for-upnp-streaming-with-audio-transcoding/</guid><description>&lt;p>Recently, I tackled the challenge of configuring my GL-MT3000 router to serve as a UPnP media server with audio transcoding capabilities. Here&amp;rsquo;s how I did it without overloading this nifty little device.&lt;/p>
&lt;h3 id="setting-up-the-upnpdlna-server">Setting Up the UPnP/DLNA Server&lt;/h3>
&lt;p>First things first, I needed a lightweight DLNA server. After some research, I settled on &lt;code>minidlna&lt;/code>. Here&amp;rsquo;s how I got it up and running:&lt;/p>
&lt;ol>
&lt;li>I SSH&amp;rsquo;d into my router and ran:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">opkg update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">opkg install minidlna
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>Then, I edited /etc/config/minidlna to point to my media storage (I use an external USB drive) and enabled audio transcoding:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">list media_dir &amp;#39;/tmp/mountd/disk1_part1&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">option enable_transcode_audio &amp;#39;1&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>I also made sure to enable UPnP sharing in the GL-MT3000&amp;rsquo;s web interface under &amp;ldquo;Applications&amp;rdquo; &amp;gt; &amp;ldquo;File Sharing&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h3 id="tackling-audio-transcoding">Tackling Audio Transcoding&lt;/h3>
&lt;p>My Roku and iPads sometimes struggle with AC3 audio, so I needed a way to transcode it to stereo. FFmpeg to the rescue!&lt;/p></description></item><item><title>Using AI to Empower Cloud Architecture and Deployments</title><link>https://damianflynn.github.io/preview/posts/using-ai-to-empower-cloud-architecture-and-deployments/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/using-ai-to-empower-cloud-architecture-and-deployments/</guid><description>The integration of artificial intelligence (AI) into cloud infrastructure is revolutionizing how we manage and deploy cloud resources. AI, now a pivotal component, optimizes the entire lifecycle of cloud architecture, enhancing tasks like deployment, maintenance, and scaling. This article explores the role of AI in empowering cloud architecture and deployments, especially when combined with Infrastructure as Code (IaC) tools like Bicep and Terraform.</description></item><item><title>My Privacy Statement</title><link>https://damianflynn.github.io/preview/privacy/</link><pubDate>Fri, 12 Jul 2024 22:21:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/privacy/</guid><description>&lt;h3 id="this-is-my-personal-and-nonprofit-blog-damian-flynn--making-incredible-technology-incredibly-simple">This is my personal and nonprofit blog: Damian Flynn – ‘Making Incredible Technology, Incredibly Simple.’&lt;/h3>
&lt;p>My website is built using &lt;a href="https://gohugo.io/">Hugo&lt;/a>, a fast and modern static site generator, and hosted on &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>. You can find out more about me at &lt;a href="https://www.damianflynn.com/about">https://www.damianflynn.com/about&lt;/a>.&lt;/p>
&lt;h2 id="what-personal-data-i-collect">What personal data I collect&lt;/h2>
&lt;p>As a static site, I don’t have a backend or database, and I don’t actively collect personal data. However, I do use some third-party services—like analytics or comment systems—which may gather limited information to help me understand how people use the site and to improve your experience.&lt;/p></description></item><item><title>My Disclaimer Statement</title><link>https://damianflynn.github.io/preview/disclaimer/</link><pubDate>Fri, 12 Jul 2024 22:19:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/disclaimer/</guid><description>&lt;h3 id="this-is-the-personal-and-nonprofit-blog-of-damian-flynn-making-incredible-technology-incredibly-simple">This is the Personal and Nonprofit Blog of Damian Flynn ‘Making Incredible Technology, Incredibly Simple’.&lt;/h3>
&lt;h1 id="opinions">Opinions&lt;/h1>
&lt;p>This is a personal blog. Any views or opinions represented in this blog are personal and belong solely to the blog owner and do not represent those of people, institutions or organisations that the owner may or may not be associated with in professional or personal capacity, unless explicitly stated.&lt;/p>
&lt;p>Any views or opinions are not intended to malign any religion, ethnic group, club, organization, company, or individual.&lt;/p></description></item><item><title>About Me</title><link>https://damianflynn.github.io/preview/about/</link><pubDate>Wed, 10 Jul 2024 08:38:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/about/</guid><description>&lt;h3 id="evangelist-thinker-creative-doer">Evangelist, Thinker, Creative Doer&lt;/h3>
&lt;h1 id="makingincredibletechnologyincrediblysimple">Making Incredible Technology Incredibly Simple!&lt;/h1>
&lt;p>Principal Azure Cloud Solution Architect, ‘Governed Azure Virtual Datacenter’ Product Owner; working for Innofactor Norway, based in Ballina, Ireland. Specialising on Cloud Governance and Operations Automation, DevOps and Development.&lt;/p>
&lt;p>I define myself as an evangelist; an entrepreneur &amp;amp; author with an ideology rooted in business insights, technology exploration, pattern analysis and high energy. I envision, theorize and develop system architecture and strategic business platforms, soaked in storytelling and innovative technology.&lt;/p></description></item><item><title>Bicep - Tags as Parameters</title><link>https://damianflynn.github.io/preview/posts/bicep-tags-as-parameters/</link><pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/bicep-tags-as-parameters/</guid><description>&lt;p>&lt;strong>Deploying infrastructure ARM Templates to Azure, but using Tags and their respective value as the parameter configuration settings&lt;/strong>&lt;/p>
&lt;p>In a post earlier, we look at using arm to lookup the value of tags&amp;rsquo; at both the Subscription and Resource Level.&lt;/p>
&lt;p>With Bicep this is much easier to understand. This is the same lab configuration as in the original post, but this time to code should be a lot more readable.&lt;/p></description></item><item><title>Streaming Vinyl On Sonos</title><link>https://damianflynn.github.io/preview/posts/streaming-vinyl-on-sonos/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/streaming-vinyl-on-sonos/</guid><description>&lt;p>&lt;strong>Mixup some Vyinl Oldies, a little Ice to cast, and a PI for some energy, and your ready to go&lt;/strong>&lt;/p>
&lt;p>A little known trivia - I was once a Disc Jokey, and spent a lot of my youth behind the decks, in clubs around the West Of Ireland. Today, I still am the proud owner of a very large collection of Vynil and CD music, which of course deserves to get a second life with my digital streaming audio system powered by Sonos&lt;/p></description></item><item><title>Azure IaC - Tags as Parameters</title><link>https://damianflynn.github.io/preview/posts/azure-iac-tags-as-parameters/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/azure-iac-tags-as-parameters/</guid><description>&lt;p>Deploying infrastructure ARM Templates to Azure, but using Tags and thier respective value as the parameter configuration settings&lt;/p>
&lt;p>In the post, I am going to introduce a concept which will allow you to greatly up your Infrastructure as Code game, by using Azure as a State Machine!&lt;/p>
&lt;p>One of the typical challenges when deploying ARM templates, is the sheer number of parameters which we find as a requirement to complete a deployment; which as you will appreciate gets considerably harder as we target many environments.&lt;/p></description></item><item><title>Change Detection Using Oxidized</title><link>https://damianflynn.github.io/preview/posts/change-detection-using-oxidized/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/change-detection-using-oxidized/</guid><description>&lt;p>Oxidized is a Linux based service which has the ability to monitor a device’s configuration, including software and hardware. Current configuration is backed up from each device and stored to a GIT repository to maintain history of changes.&lt;/p>
&lt;p>The process is very simple:&lt;/p>
&lt;ol>
&lt;li>Login to each device in the router list router.db,&lt;/li>
&lt;li>Run Commands to get the information that will be saved&lt;/li>
&lt;li>Clean the output&lt;/li>
&lt;li>Commit the Changes to GIT Repository
The tool is coded in &lt;em>Ruby&lt;/em>, and implements a Domain Specific Language (DSL) for interaction.&lt;/li>
&lt;/ol>
&lt;p>Finally, there is a Web based User experience included in the solution so we can get a fast overview of the world.&lt;/p></description></item><item><title>Azure Enterprise Agreement Delegation</title><link>https://damianflynn.github.io/preview/posts/azure-enterprise-agreement-delegation/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/azure-enterprise-agreement-delegation/</guid><description>&lt;p>Delegating Azure Enterprise Agreement Owner privileges to a Service Principal (SPN)&lt;/p>
&lt;p>Under the Enterprise agreement we have some different Persona’s, which have quite different abilities and operations upon which they are permitted to preform.&lt;/p>
&lt;p>Before we being the process of delegation, It is important to understand this Hierarchy, so we can correctly proceed with the technical work ahead.&lt;/p>
&lt;h1 id="enterprise-administrator">Enterprise Administrator&lt;/h1>
&lt;p>Has the ability to add additional Enterprise and Department Administrators, Additional this persona can&lt;/p></description></item><item><title>Azure IaC - Function Keys</title><link>https://damianflynn.github.io/preview/posts/azure-iac-function-keys/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/azure-iac-function-keys/</guid><description>&lt;p>&lt;strong>Retrieve the Function Host Keys while deploying an ARM template&lt;/strong>&lt;/p>
&lt;p>Todays conundrum: As I deploy a new Function Application, I need a simple methodology to retrieve the Host Keys for the function application so that I validate the deployment has been successful; and potentially pass on the key to related services, for example API Management.&lt;/p>
&lt;p>As before, I am leveraging templates, and will stay cloud native; this time depending on the functions Output ability to present the keys.&lt;/p></description></item><item><title>Azure IaC - Appending Tags</title><link>https://damianflynn.github.io/preview/posts/azure-iac-appending-tags/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/azure-iac-appending-tags/</guid><description>&lt;p>&lt;strong>Dynamically appending Tags to our ARM template with the union function&lt;/strong>&lt;/p>
&lt;p>Todays conundrum: As I am leveraging templates, there will always be some standard tags I require to implement within the template, but I also require to provide additional tags as a parameter to be appended with the deployment.&lt;/p>
&lt;p>My objective is to set up tags within an ARM template in accordance with good governance and the Cloud adoption framework.&lt;/p></description></item><item><title>Global Transit Network For Azure Virtual WAN</title><link>https://damianflynn.github.io/preview/posts/global-transit-network-for-azure-virtual-wan/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/global-transit-network-for-azure-virtual-wan/</guid><description>&lt;p>The Journey started with the concept of VNets, with work loads, and have evolved in the direction of Subnets, and quickly became a very complex list of islands which were disconnected&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Security&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Public Cloud&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SaaS, Internet&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Users&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Branch Offices
Virtual WAN is a managed service&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Managed by Microsoft with global scale, and multplie endpoints.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each Hub can support 60Gb of connectivity;&lt;/p>
&lt;ul>
&lt;li>Including 20Gb of ExpressRoute.&lt;/li>
&lt;li>20Gb of User VPN&lt;/li>
&lt;li>20Gb Site to Site&lt;/li>
&lt;li>Supports 10K users per hub, 1000 sites per hub&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Transit Routing&lt;/p></description></item><item><title>Managed Applications and Custom Resource Providers</title><link>https://damianflynn.github.io/preview/posts/managed-applications-and-custom-resource-providers/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/managed-applications-and-custom-resource-providers/</guid><description>&lt;p>Magnify the power of extending Azure platform by enabling customers and partners to easily bring in custom solutions to azure. These can be scoped for offering to our own enterprise, or just some selected customers; or even all customers.&lt;/p>
&lt;p>Challenges with extending azure include many of the typical thoughts we face&lt;/p>
&lt;ul>
&lt;li>As part of my deployment i need to do extra works&lt;/li>
&lt;li>Need to interface with external APIs, create users, storage tables, calling APIs external to Azure, while deploying ARM templates&lt;/li>
&lt;li>200 Services, which service should i be selected, What is the correct VM SKU? what would be more cost efficient&lt;/li>
&lt;li>How do I integrate my service into Azure; What is the correct option to expose my service to my enterprise, or all azure users&lt;/li>
&lt;/ul>
&lt;h1 id="how-do-we-deploy-and-offer">How do we deploy and offer?&lt;/h1>
&lt;h2 id="deployment-script">Deployment Script&lt;/h2>
&lt;p>&lt;strong>New&lt;/strong> resource type - &lt;code>Microsoft.Resources/DeploymentScripts&lt;/code>&lt;/p></description></item><item><title>Web Application Gateway</title><link>https://damianflynn.github.io/preview/posts/web-application-gateway/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/web-application-gateway/</guid><description>&lt;p>Delivering PaaS Services Privately on Azure VNets with Private Link&lt;/p>
&lt;p>Mission Critical HTTP Applications, there are many things to consider&lt;/p>
&lt;p>Personalised, Micro-Services, Rich Context…. To support this MS have a number of services i the Suite - Azure Frontdoor, Application Gateway, Azure CDN, Web Application Firewall, Azure Load Balancer, and Azure Traffic Manager&lt;/p>
&lt;h1 id="azure-application-gateway">Azure Application Gateway&lt;/h1>
&lt;p>Regional Gateway as a service&lt;/p>
&lt;p>Standard V2 SKU in GA, Currently Available in 26 regions, Builtin Zone Redundancy, Static VIP, HTTP Header/cookies insertion/modification&lt;/p></description></item><item><title>Guacamole Azure Appliance</title><link>https://damianflynn.github.io/preview/posts/guacamole-azure-appliance/</link><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/guacamole-azure-appliance/</guid><description>&lt;p>Apache Guacamole is a free and open source web application which lets you access your dashboard from anywhere using a modern web browser. It is a clientless remote desktop gateway which only requires Guacamole installed on a server and a web browser supporting HTML5.&lt;/p>
&lt;p>Guacamole is the best way to keep multiple instances accessible over the internet. Once you add an instance to Guacamole, you don’t need to remember the password as it can securely store the credentials. It also lets you share the desktops among other users in a group. Guacamole supports multiple connection methods such as SSH, Telnet, VNC, and RDP.&lt;/p></description></item><item><title>CBus MQTT Bridge on Raspberry PI</title><link>https://damianflynn.github.io/preview/posts/cbus-mqtt-bridge-on-raspberry-pi/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/cbus-mqtt-bridge-on-raspberry-pi/</guid><description>&lt;p>Turn back to 2007; My wife and I built our home, integrating many smart technologies, including the Clipsal C-Bus lighting system. This solution is classified as a Prosumer technology, and is designed to integrate into whole house automation systems.&lt;/p>
&lt;p>The C-Bus system implements however a propriatory technology, and utilizes a communication protocol which is not ‘open source’; however, accepting a licence agreement will permit access to this protocol for creating an programming interface.&lt;/p></description></item><item><title>Configuration the Ubiquity EdgeRouter with WireGuard</title><link>https://damianflynn.github.io/preview/posts/configuration-the-ubiquity-edgerouter-with-wireguard/</link><pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/configuration-the-ubiquity-edgerouter-with-wireguard/</guid><description>&lt;p>Virtual Private Networks are unmissable; however with many states now banning and actively blocking these tunnels the search for an alternative approach is appropriate, if we are to protect our identity and intellectual property.&lt;/p>
&lt;p>One technology which claims to have fantastic throughput when compared to the stable IPSEC solutions, and based on benchmarks I have calculated leaves OpenVPN protocols in the dust, Wireguard positions itself as an in-kernel VPN solution which is very easy to implement and highly secure.&lt;/p></description></item><item><title>Configuring the Web Application Firewall with PowerShell.</title><link>https://damianflynn.github.io/preview/posts/configuring-the-web-application-firewall-with-powershell./</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/configuring-the-web-application-firewall-with-powershell./</guid><description>&lt;p>Microsoft Azure Application Gateway is a Layer 7 application delivery controller (ADC) offered as a service in Azure. It provides load balancing, SSL termination, end-to-end SSL, URL path-based routing, and basic web application firewall (WAF) functionality.&lt;/p>
&lt;p>Working with the WAF, I usually build a basic configuration in the Portal before exporting the ARM JSON, which, then becomes my primary method to working on this service.&lt;/p>
&lt;p>&lt;strong>Why JSON you may ask…&lt;/strong>&lt;/p></description></item><item><title>Installing Docker and Compose on Raspbian Buster</title><link>https://damianflynn.github.io/preview/posts/installing-docker-and-compose-on-raspbian-buster/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/installing-docker-and-compose-on-raspbian-buster/</guid><description>&lt;p>Quickly update a new Raspberry Pi, which has an install of Raspbian Buster with Docker and Docker-compose.&lt;/p>
&lt;h1 id="docker">Docker&lt;/h1>
&lt;p>This is simple, as the Docker team have done all the work&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -fsSL get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And, we can add our user to the Docker group so we do not need the &lt;code>sudo&lt;/code> every time. I am using the environment variable &lt;code>$USER&lt;/code>; which indicates who is logged in currently. In my case this is the user &lt;em>pi&lt;/em>.&lt;/p></description></item><item><title>Running FastLED on the Dual-Core ESP32</title><link>https://damianflynn.github.io/preview/posts/running-fastled-on-the-dual-core-esp32/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/running-fastled-on-the-dual-core-esp32/</guid><description>&lt;p>There are many projects posted over the web which implement the excellent FastLED library on the ESP12 processor; however locating a project which implements this on the more powerful sibling is a lot more difficult.&lt;/p>
&lt;p>So, with a few failed attempts and a lot of patching samples together; I have a stable running implementation which you can clone or fork to get up and running quickly with your own projects.&lt;/p></description></item><item><title>Configure Wireguard on UniFi USG</title><link>https://damianflynn.github.io/preview/posts/configure-wireguard-on-unifi-usg/</link><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/configure-wireguard-on-unifi-usg/</guid><description>&lt;p>&lt;strong>Install the Wireguard Package&lt;/strong>&lt;/p>
&lt;p>SSH directly to your USG, and run the following commands:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -L https://github.com/Lochnair/vyatta-wireguard/releases/download/0.0.20190123/wireguard-ugw3-0.0.20190702-1.deb -o /tmp/wireguard.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpkg -i /tmp/wireguard.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="create-the-tunnel-secrets">Create the Tunnel Secrets&lt;/h1>
&lt;p>To keep stuff private, we will encrypt the traffic using a long password, known as a ‘Key’. To make sure this is unique, we will use a tool provided by Wireguard to make a random key for us.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /config/auth
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">umask&lt;/span> &lt;span class="m">077&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir wireguard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> wireguard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wg genkey &amp;gt; wg_private.key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wg pubkey &amp;lt; wg_private.key &amp;gt; wg_public.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="configure-the-tunnels">Configure the Tunnels&lt;/h2>
&lt;p>While still connected to the USG, we will now create the Interface which will be our end of the tunnel. If we consider this as a Bridge, then as we configure this interface, we will provide the address for our side and also the address of the far side.&lt;/p></description></item><item><title>Updating Pester on Windows 10</title><link>https://damianflynn.github.io/preview/posts/updating-pester-on-windows-10/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/updating-pester-on-windows-10/</guid><description>&lt;p>I spend the majority of my time working on my Windows machines, and for many scenarios, I find it difficult to complain. However, when Windows decides to dig the boot in and not co-operative; usually is when I grab my Mac Book and get the work done.&lt;/p>
&lt;p>However, running aware from the problem rarely is a good fix for the issue; My latest battle has been Pester. The testing framework builds on Powershell, and by the grace of God, now shipped as part of the Windows 10 operating system.&lt;/p></description></item><item><title>Waking Deamons</title><link>https://damianflynn.github.io/preview/posts/waking-deamons/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/waking-deamons/</guid><description>&lt;p>With a multitude of Raspberry PI’s deployed around the house, each taking a dedicated duty in ensuring that services run transparently; It is not uncommon for me to discover the initialization scripts designed to have these services auto start at boot is not working.&lt;/p>
&lt;p>The content of this post is a reference for different methods which can be employed to resolve these stubborn daemons; which always are to fond of reappearing after an unplanned outage; or what is more commonly referred to as a Power Failure!&lt;/p></description></item><item><title>Configure VS Code with Azure Cloud Shell</title><link>https://damianflynn.github.io/preview/posts/configure-vs-code-with-azure-cloud-shell/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/configure-vs-code-with-azure-cloud-shell/</guid><description>&lt;p>After years living in tools like Visual Studio, and PowerShell; Currently my primary landing ground is Visual Studio Code. With my target audience firmly defined as Azure; In this post I am going to share my notes on how to get these two tools working harmonisly; and to make the experience a little richer, we will also mount the underlying Cloud Drive File Share of the Azure Cloud Shell on our local computer as a PowerShell Drive (PSDrive).&lt;/p></description></item><item><title>Welcome to 2019</title><link>https://damianflynn.github.io/preview/posts/welcome-to-2019/</link><pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/welcome-to-2019/</guid><description>&lt;p>First, allow me to thank all of you that are continuing to read this blog; despite the drought which I am predicting has now passed. I have a long list of topics which I wish to address in detail throughout the year; focused on the areas which I am most passionate.&lt;/p>
&lt;h2 id="speaking">Speaking&lt;/h2>
&lt;p>Last year I had the opportunity to meet a lot of you in various parts of the globe, primarily speaking at some significant events; including the ‘Nordic NIC Conference’, ‘Cloud and Datacenter Conference’, ‘Tech Camp’ and ‘Experts Live’.&lt;/p></description></item><item><title>Fixing Calendar Chaos</title><link>https://damianflynn.github.io/preview/posts/fixing-calendar-chaos/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/fixing-calendar-chaos/</guid><description>&lt;p>Assuringly I am not alone, when we sit down as a family and talk about our day, and the plan for the next days or the weekend; only to realise that we have some real scheduling issues; because you totally forgot that you would take the children to an event; while your partner had a long-standing appointment with the hairdresser.&lt;/p>
&lt;p>Letting this happen once or twice, is forgivable, but happing on a regular basis; is the recipe for a lousy dispute; that we do not need.&lt;/p></description></item><item><title>My Journey to the Internet of Things</title><link>https://damianflynn.github.io/preview/posts/my-journey-to-the-internet-of-things/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/my-journey-to-the-internet-of-things/</guid><description>&lt;p>In a previous post, I referred to an embedded device which is called a &lt;strong>NodeMCU&lt;/strong>. This device is a developer kit, designed to make it easy to develop and test programs for the embedded &lt;em>ESP8266 System on a Chip&lt;/em>. Many manufacturers are offering both developer and production kits which leverage this SoC; including the Wemos D1, Lolin, and in my case the NodeMCU.&lt;/p>
&lt;p>The function of these developer kits is to add some supporting features, for example, a USB to serial converter which makes programming a lot easier, in addition to a couple of buttons, and maybe an LED or two, for testing some simple scenarios with.&lt;/p></description></item><item><title>Wavemaker</title><link>https://damianflynn.github.io/preview/posts/wavemaker/</link><pubDate>Tue, 27 Nov 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/wavemaker/</guid><description>&lt;p>Careers are what we all invest our energy and emotions in, either positively or negatively. Positive being the belief that we can make significant progress in this or another organisation and that it will give us the wherewithal to have a happy and productive life. Negative in that we can feel that everyone is out to get us, and the slippery pole has been freshly greased to scupper us.&lt;/p>
&lt;p>That it’s a “not what you know but who you know” world, and, unfortunately, you don’t know anyone.&lt;/p></description></item><item><title>Defining Policy as Code with ARM Templates</title><link>https://damianflynn.github.io/preview/posts/defining-policy-as-code-with-arm-templates/</link><pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/defining-policy-as-code-with-arm-templates/</guid><description>&lt;p>My colleagues and friends &lt;a href="https://blog.tyang.org/2018/06/06/using-arm-templates-to-deploying-azure-policy-definitions-that-requires-input-parameters/">Tao Yang&lt;/a> , and &lt;a href="https://cloudadministrator.net/2018/07/17/defining-input-parameters-for-policy-definitions-in-arm-template/">Stanislav Zhelyazkov&lt;/a> have both recently posts interesting topics on how to implement your Azure Policy as Code which I strongly recommend you take a few moments to review&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.tyang.org/2018/06/06/using-arm-templates-to-deploying-azure-policy-definitions-that-requires-input-parameters/">Using ARM Templates to deploy azure policy definitions that require input parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloudadministrator.net/2018/07/17/defining-input-parameters-for-policy-definitions-in-arm-template/">Defining input parameters for policy definitions in ARM Templates&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="improving-readability">Improving Readability&lt;/h1>
&lt;p>Both of these topics address the core of the challenges we face when approaching policy as an Infrastructure as Code problem. However, one of the things that is lost in the translation is the readability of the templates which they are deploying.&lt;/p></description></item><item><title>NodeMCU Pinouts</title><link>https://damianflynn.github.io/preview/posts/nodemcu-pinouts/</link><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/nodemcu-pinouts/</guid><description>&lt;p>For the past year, I have been using a tiny board, known as the &lt;strong>NodeMCU&lt;/strong> which is essentially a developer board for a module know as the &lt;strong>ESP8266&lt;/strong>. The &lt;strong>NodeMCU&lt;/strong> is formed by an &lt;strong>ESP12E&lt;/strong>, which still has an &lt;strong>ESP8266EX&lt;/strong> inside it.&lt;/p>
&lt;p>&lt;img src="img-4d0d2e1c-NodeMCU_ESP12E.jpg" alt="Image">&lt;/p>
&lt;p>This device is really nice to work with, it is supplied preconfigured with a Micro USB input, for both programming and power.&lt;/p>
&lt;blockquote>
&lt;p>The term NodeMCU usually refers to the firmware, while the board is called Devkit. NodeMCU Devkit 1.0 consists of an ESP-12E on a board, along with a voltage regulator, a USB interface.&lt;/p></description></item><item><title>Implementing Comments on a Static Site</title><link>https://damianflynn.github.io/preview/posts/implementing-comments-on-a-static-site/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/implementing-comments-on-a-static-site/</guid><description>&lt;p>At this point we are almost ready to go live with our site, however, one of the cornerstones to growing and sharing is communication.&lt;/p>
&lt;h1 id="wordpress">Wordpress&lt;/h1>
&lt;p>In the world of Wordpress, this was a standard core feature, which leveraged the fact that the pages were rendered on demand from a backend database. In this scenario, the same approach is offered to maintain a commenting platform.&lt;/p>
&lt;p>However, as I noted earlier; given that Wordpress powers a very large portion of the blogging surface of the internet; it is an obvious target for hacking, just refer to the CVS database for a glimpse of what this looks like in reality.&lt;/p></description></item><item><title>Using pipelines for flow static site content between markdown and foundation</title><link>https://damianflynn.github.io/preview/posts/using-pipelines-for-flow-static-site-content-between-markdown-and-foundation/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/using-pipelines-for-flow-static-site-content-between-markdown-and-foundation/</guid><description>&lt;p>With the heavy lifting done in creating the site building mechanics and a solid foundation to build and share upon; our final objective is to automate the process of connecting these two stages.&lt;/p>
&lt;h1 id="release-pipeline">Release Pipeline&lt;/h1>
&lt;p>Technically the goal we are speaking about is the &lt;strong>Release Pipeline&lt;/strong> which will take the artefact &lt;em>(our site .ZIP file)&lt;/em> that we created in the &lt;strong>Build Pipeline&lt;/strong> in our previous topic &lt;a href="https://damianflynn.github.io/preview/Building-The-Site/">Constructing a new Home with Jekyll and Azure DevOps&lt;/a>; and publish this to our storage account.&lt;/p></description></item><item><title>Laying the foundation in Azure for a Static Site</title><link>https://damianflynn.github.io/preview/posts/laying-the-foundation-in-azure-for-a-static-site/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/laying-the-foundation-in-azure-for-a-static-site/</guid><description>&lt;p>Hosting my site on Wordpress was not super complex; I leveraged the Azure PaaS Services for Web Apps, and orginally the 3rd party support for hosted MySQL database’s. Once I was up and running I quickly realised that all media hosted on the site were landing on the webserver, so a plugin from its marketplace offered the ability to relocate the media to an Azure Blob; offloading some of the challanges.&lt;/p></description></item><item><title>Constructing a new Home with Jekyll and Azure DevOps</title><link>https://damianflynn.github.io/preview/posts/constructing-a-new-home-with-jekyll-and-azure-devops/</link><pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/constructing-a-new-home-with-jekyll-and-azure-devops/</guid><description>&lt;p>One of the unspoken truths behind the lack of posts in recent history was due to a few bugs, which in the end resulted in an experience where from home it appeared that any new content was published and working; but outside this fortress in the real world, there was a large silence echoing.&lt;/p>
&lt;p>I really only discovered this issue in May of this year, and was, to say the least, a little agitated with the situation and decided then to change the approach to how I save my notes and share my thoughts.&lt;/p></description></item><item><title>Hitting Reset</title><link>https://damianflynn.github.io/preview/posts/hitting-reset/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/hitting-reset/</guid><description>&lt;p>10 Years, It is hard to believe that I have been posting thoughts here that long. And how so much has changed since I begun?&lt;/p>
&lt;p>I started this journey with the encouragement of some amazing people in Microsoft, as an opportunity to spread the news about &lt;em>Hyper-V&lt;/em> and even more relevant at the time &lt;em>System Center Virtual Machine Manager&lt;/em> which was still known by its code name!.&lt;/p>
&lt;p>My daily experience with this application, Windows Server, and real-world enterprise issues; positioned me at one of the leading edges of Microsoft Technologies; and fully armed with a true business driver pushing forward. Wounds and pains exposed, I gained a lot of insight to the digital plumbing of these technologies and as a result of a lot of fantastic information to share - sometimes not good news; but never the less - reality.&lt;/p></description></item><item><title>Markdown</title><link>https://damianflynn.github.io/preview/posts/markdown/</link><pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate><guid>https://damianflynn.github.io/preview/posts/markdown/</guid><description>&lt;h1 id="heading-1">Heading 1&lt;/h1>
&lt;p>Link to &lt;a href="https://github.com/">GitHub&lt;/a>&lt;/p>
&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut sagittis commodo mauris, id semper ipsum condimentum sed. Nunc quam velit, malesuada et finibus a, laoreet vitae lacus. Morbi in augue sodales, semper tellus sed, scelerisque lacus. Pellentesque eu turpis non eros tristique malesuada. Quisque et magna eget lectus aliquet tempus. Donec ut nisl quis mauris tristique tincidunt. Sed eleifend facilisis enim, et gravida orci. Morbi erat ligula, commodo ut sapien non, blandit lacinia sem.&lt;/p></description></item></channel></rss>